B - Wireless Network
Time Limit:10000MS     Memory Limit:65536KB     64bit IO Format:%I64d & %I64u
Submit
 
Status
 
Practice
 
POJ 2236
Description
An earthquake takes place in Southeast Asia. The ACM (Asia Cooperated Medical team) have set up a wireless network with the lap computers, but an unexpected aftershock attacked, all computers in the network were all broken. The computers are repaired one by one, and the network gradually began to work again. Because of the hardware restricts, each computer can only directly communicate with the computers that are not farther than d meters from it. But every computer can be regarded as the intermediary of the communication between two other computers, that is to say computer A and computer B can communicate if computer A and computer B can communicate directly or there is a computer C that can communicate with both A and B. 

In the process of repairing the network, workers can take two kinds of operations at every moment, repairing a computer, or testing if two computers can communicate. Your job is to answer all the testing operations. 
Input
The first line contains two integers N and d (1 <= N <= 1001, 0 <= d <= 20000). Here N is the number of computers, which are numbered from 1 to N, and D is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers xi, yi (0 <= xi, yi <= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats: 
1. "O p" (1 <= p <= N), which means repairing computer p. 
2. "S p q" (1 <= p, q <= N), which means testing whether computer p and q can communicate. 

The input will not exceed 300000 lines. 
Output
For each Testing operation, print "SUCCESS" if the two computers can communicate, or "FAIL" if not.
Sample Input
4 1
0 1
0 2
0 3
0 4
O 1
O 2
O 4
S 1 4
O 3
S 1 4
Sample Output
FAIL
SUCCESS


#include<iostream>
#include<vector>
#include<string>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<stack>
#include<algorithm>
#include<queue>
using namespace std;
// 初始化并查集
#define N 1010 
bool status[N];
int father[N];
void init(int n) {
    for(int i=0; i<n; i++)
      father[i] = i;
}

/*
// 获取根结点
int getfather(int x) {
    while(x != father[x])
      x = father[x];
    return x;
}
*/

// 获取根结点  路径压缩
int getfather(int x) {
    if(x != father[x])
      father[x] = getfather(father[x]); // 路径压缩修改的是father数组
    return father[x];
}

// 合并两个元素所在的集合
void unionSet(int x,int y) 
{
    x = getfather(x);
    y = getfather(y);
    if(x!= y)
       father[x]=y;
}

// 判断两个元素是否属于同一个集合
bool same(int x,int y) {
    return getfather(x)==getfather(y);
}

pair<int, int> comp[N];
int main()
{
	int n,d,i;
	cin>>n>>d;
	for(i=0;i<n;i++){
		cin>>comp[i].first>>comp[i].second;
	}
	init(n);
	char op;
	int p,q;
	while(cin>>op){
		if(op=='O'){
			cin>>p;
			p--;
			status[p]=true;
			for(i=0;i<n;i++){
				if(i==p)
					continue;
				if(status[i]&&((comp[i].first-comp[p].first)*(comp[i].first-comp[p].first)+(comp[i].second-comp[p].second)*(comp[i].second-comp[p].second))<=d*d)
					unionSet(p,i);	
			}
		}else{
			cin>>p>>q;
			p--;q--;
			if(same(p,q)){
				puts("SUCCESS");
			}else{
				puts("FAIL");
			}
		}
	}
	return 0;
}